<div class="row">
    <div class="col">
        <label for="author" class="form-label">Etunimi</label>
        <input type="text" class="form-control" maxlength="1" id="author" placeholder="Syötä etunimi" aria-label="Etunimi" value="@_author?.Initial" @onchange="@OnInitialChanged">
    </div>
    <div class="col">
        <label for="author" class="form-label">Sukunimi</label>
        <input type="text" class="form-control" id="author-lastname" placeholder="Syötä sukunimi" aria-label="Etunimi" value="@_author?.LastName" @onchange="@OnLastnameChanged">
    </div>
    <div class="col">
        <button class="btn" @onclick="@OnRemoveAuthorClicked">Poista tekijä</button>
    </div>
</div>

@code {
    private AuthorDto? _author { get; set; }

    [Parameter]
    public EventCallback<AuthorDto> OnAuthorChanged { get; set; }

    [Parameter]
    public EventCallback<AuthorDto> OnAuthorCreated { get; set; }

    [Parameter]
    public EventCallback RemoveAuthor { get; set; }

    [Parameter]
    public Mode Mode { get; set; } = Mode.Manual;

    private async Task OnRemoveAuthorClicked()
        => await RemoveAuthor.InvokeAsync();

    private async Task OnLastnameChanged()
    {
        if (_author is null)
        {
            _author = new AuthorDto();
            await OnAuthorCreated.InvokeAsync(_author);
            return;
        }

        await OnAuthorChanged.InvokeAsync(_author);
    }

    private async Task OnInitialChanged()
    {
        if (_author is null)
        {
            _author = new AuthorDto();
            await OnAuthorCreated.InvokeAsync(_author);
            return;
        }

        await OnAuthorChanged.InvokeAsync(_author);
    }
}